{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)6504b97f-9eaa-4de6-9214-59e71ade0e55","ParentGuid":"(Guid)802b15fd-79d5-49cd-bd94-8749e22869a3","Name":"(string)Init_SubModules","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)a77372fd-1ab6-4602-b45d-51c4cc6c1d0c"}]}}}}]},"TypeGuid":"(Guid)8ac092e5-3128-4e26-9e7e-11016c6684f2","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"8ac092e5","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)(* System generated code, could be modified for your application *)\n\n(* Module Group declaration *)\n\naaudiSubModuleGroups[c_udiMasterGroup-TPL.Gc_udiGroupOffset,TPL.ET_Group.Member1]\t:= c_udiAlpha;\t\t(* The c_udiAlpha is the first element of the group c_udiMasterGroup *)\naaudiSubModuleGroups[c_udiMasterGroup-TPL.Gc_udiGroupOffset,TPL.ET_Group.Member2]\t:= 0;\t\t\t\t(* There is no second element of the group c_udiMasterGroup *)\n\naaudiSubModuleGroups[c_udiServoDrivesGroup-TPL.Gc_udiGroupOffset,TPL.ET_Group.Member1]\t:= c_udiBravo;\t\t(* The c_udiBravo is the first element of the group c_udiServoDrivesGroup *)\naaudiSubModuleGroups[c_udiServoDrivesGroup-TPL.Gc_udiGroupOffset,TPL.ET_Group.Member2]\t:= c_udiAlpha;\t\t(* The c_udiCharly is the second element of the group c_udiServoDrivesGroup *)\n\n\n(* Configuration of exception logging *)\nG_stLogDataList.wExceptionLogDataFilter\t:= UDINT_TO_WORD(TPL.ET_LogDataFilter.ExceptionListDefault);\n\n(* Exception in case of an overflow of the exception list - Set ModuleId and ModuleName *)\nG_stExceptionList.stOverflowException.udiModuleId\t:= stMachineInterface.i_udiModuleId;\nG_stExceptionList.stOverflowException.sModuleName\t:= stMachineInterface.i_sModuleName;\n\n\n(* Example, how to modify the reaction of the overflow exception, by default all reactions are set *)\n// FC_ReinitReaction(iq_stException := G_stExceptionList.stOverflowError); //set reaction to no reaction\n// G_stExceptionList.stOverflowException.stReaction.axReaction[TPL.ET_Reaction.AsyncStop] := TRUE;\n// G_stExceptionList.stOverflowException.stReaction.axReaction[TPL.ET_Reaction.MainsContactorOff] := TRUE; //ensure that the worst possible reactions for your machine are set\n\n\n(* Set logger save file name and path *)\nG_stLoggerInterface.i_sFileName\t\t:= 'ram0:TPL_LOG.XML';\t\t\t\t\t(* 'ide0:TPL_LOG.XML', 'ram0:TPL_LOG.CSV', 'remote:ram0:\\\\TPL_LOG.XML' *)\nG_stLoggerInterface.i_xEnable\t\t:= TRUE;\nG_stLoggerInterface.i_etSortKey\t\t:= TPL.ET_LogDataSortKey.SortByTime;\t(*\tTPL.ET_LogDataSortKey.SortByCmd\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTPL.ET_LogDataSortKey.SortById\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTPL.ET_LogDataSortKey.SortByModuleId\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTPL.ET_LogDataSortKey.SortByModuleIdAndTime\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTPL.ET_LogDataSortKey.SortByName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTPL.ET_LogDataSortKey.SortByReaction\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTPL.ET_LogDataSortKey.SortByTime *)\n\n(* End of system generated code, could be modified for your application *)\n\n(* System generated code, do not change without consulting 'Schneider Electric Automation GmbH' - otherwise you risk instability!!!*)\nxInitSubModulesException := FALSE;\n\n(*****************************************************************************************************************************************************)\n(* Set IDs of SubModules *)\t\n\nTPL.FC_SetSubModuleIds(\ti_udiMainModuleID\t\t\t:= stMachineInterface.i_udiModuleId,\n\t\t\t\t\t\ti_pstSubModulesItf\t\t\t:= ADR(astSubModuleInterface),\n\t\t\t\t\t\ti_udiNumberOfSubModules\t\t:= c_udiNumberOfSubModules,\n\t\t\t\t\t\tq_etDiag\t\t\t\t\t=> etDiag,\n\t\t\t\t\t\tq_etDiagExt\t\t\t\t\t=> etDiagExtTPL);\n\t\t\t\t\t\nIF etDiag <> GD.ET_Diag.Ok AND NOT xInitSubModulesException THEN\n\txInitSubModulesException := TRUE;\n\t\n\tstInitSubModulesException.sMsg := PDL.FC_MultiConcat(\ti_sString1 := 'SetSubModuleIds - ', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString2 := GD.FC_EtDiagToString(i_etDiag := etDiag), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString3 := ' - ', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString4 := TPL.FC_EtDiagExtToString(i_etDiagExt := etDiagExtTPL));\nEND_IF\t\n\n(*****************************************************************************************************************************************************)\n(* Set exception if any exception occurred *)\n\nfbExceptionHandler.SetException(i_xExceptionActive\t:= xInitSubModulesException, \n\t\t\t\t\t\t\t\tiq_stException\t\t:= stInitSubModulesException, \n\t\t\t\t\t\t\t\tiq_stExceptionList\t:= G_stExceptionList);\n\nxInitSuccessful := xInitSuccessful AND NOT xInitSubModulesException;\n\t\t\t\t\t\netDiag := GD.ET_Diag.Ok;\n\t\t\t\t\t\n(* End of system generated code, do not change without consulting 'Schneider Electric Automation GmbH' - otherwise you risk instability!!!*)","LineInfoPersistence":"(string)6504b97f-9eaa-4de6-9214-59e71ade0e55_Impl_LineIds"}}}},"UniqueIdGenerator":"(string)190"}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","8ac092e5":"{8ac092e5-3128-4e26-9e7e-11016c6684f2}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}