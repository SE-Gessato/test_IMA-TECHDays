{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)5f18f67e-367f-475b-9488-828a83e2dd17","ParentGuid":"(Guid)802b15fd-79d5-49cd-bd94-8749e22869a3","Name":"(string)Start_Action","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)01a6af87-8012-4d18-875f-4019cc9317e2"}]}}}}]},"TypeGuid":"(Guid)8ac092e5-3128-4e26-9e7e-11016c6684f2","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"8ac092e5","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)(* This step is active until the machine is being enabled *)\t\n\n(* System generated code, do not change without consulting 'Schneider Electric Automation GmbH' - otherwise you risk instability!!!*)\nxVirtualSystem := TPL.FC_GetVirtualSystem() AND GVL_Project.Gc_xVirtualMulticarrier;\n\t\nstMachineInterface.q_sModuleTypeName\t:= c_sModuleTypeName;\nstMachineInterface.q_dwModuleType\t\t:= c_dwModuleType;\nstMachineInterface.q_udiModuleVersion\t:= c_udiModuleVersion;\n(* End of system generated code, do not change without consulting 'Schneider Electric Automation GmbH' - otherwise you risk instability!!!*)\n\n(* System generated code, could be modified for your application *)\nIF(SYSTEMINTERFACE.FC_GetPacDriveBootState() <> 1) THEN\n\t(* avoid starting as long as the boot of the controller is not finished *)\n\tstMachineInterface.i_xEnable\t:= FALSE; (* set transition condition to FALSE ==> ensure that this step stays active *)\n\n\tstMachineInterface.q_etDiag\t\t:= GD.ET_Diag.Ok;\n\tstMachineInterface.q_udiDiagExt\t:= ET_DiagExt.WaitUntilControllerFinishedBoot;\n\tstMachineInterface.q_sDiagExt\t:= FC_EtDiagExtToString(stMachineInterface.q_udiDiagExt);\n\tstMachineInterface.q_sMsg\t\t:= '';\nELSE\n\tCASE iStateInitMultiCarrier OF\n\t\n\t//-------------------------------------------------------------------------------------------------------------------------------------------\n\t0:  //--- Initialize Hardware interfaces of MultiCarrier devices ---\n\t\tstMachineInterface.q_etDiag\t\t:= GD.ET_Diag.Ok;\n\t\tstMachineInterface.q_udiDiagExt\t:= ET_DiagExt.WaitUntilSercosState4;\n\t\tstMachineInterface.q_sDiagExt\t:= FC_EtDiagExtToString(stMachineInterface.q_udiDiagExt);\n\t\tstMachineInterface.q_sMsg\t\t:= '';\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tCheckArraySizeOfTrackElements();\n\t\t\n\t\tIF \tGVL_Project.Gc_xTrackCalibrationOfMulticarrier THEN\n\t\t\tGVL_Project.G_udiUsedNumberOfCarriers := 1;\n\t\tELSE\n\t\t\tGVL_Project.G_udiUsedNumberOfCarriers := GVL_MulticarrierConfiguration.Gc_udiNumberOfCarriers;\n\t\tEND_IF\n\t\t\n\t\tIF NOT xError THEN\n\t\t\tSetTrackInterfaces(\t\tq_xError\t\t=> xError,\n\t\t\t\t\t\t\t\t\tq_etDiagExt\t\t=> stMachineInterface.q_udiDiagExt,\n\t\t\t\t\t\t\t\t\tq_sResultMsg\t=> stMachineInterface.q_sMsg);\n\t\tEND_IF\n\t\t\n\t\tIF NOT xError THEN\n\t\t\tSetSegmentInterfaces(\tq_xError\t\t=> xError,\n\t\t\t\t\t\t\t\t\tq_etDiagExt\t\t=> stMachineInterface.q_udiDiagExt,\n\t\t\t\t\t\t\t\t\tq_sResultMsg\t=> stMachineInterface.q_sMsg);\n\t\tEND_IF\n\t\t\t\t\t\t\t\t\n\t\tIF NOT xError THEN\n\t\t\tSetCarrierInterfaces(\tq_xError\t\t=> xError,\n\t\t\t\t\t\t\t\t\tq_etDiagExt\t\t=> stMachineInterface.q_udiDiagExt,\n\t\t\t\t\t\t\t\t\tq_sResultMsg\t=> stMachineInterface.q_sMsg);\n\t\tEND_IF\n\t\t\n\t\tIF NOT xError THEN\n\t\t\tSetSegmentWorkingMode();\n\t\t\tSetCarrierWorkingMode();\t\n\t\tEND_IF\n\t\t\t\n\t\tMC_Track_1.TrackGeometry.Direction\t:= GVL_MulticarrierConfiguration.Gc_astTracks[1].xDirection;\n\t\t\n\t\tIF NOT xError THEN \n\t\t\tG_ifSercos.PhaseSet := 2;\n\t\t\tiStateInitMultiCarrier := 10;\n\t\tELSE\n\t\t\tiStateInitMultiCarrier \t\t:= 1000;\n\t\tEND_IF\n\n\t//-------------------------------------------------------------------------------------------------------------------------------------------\n\t10:\t//--- Read Control Loop Parameter\n\t\tIF G_ifSercos.State = 2 THEN\n\t\t\tIF NOT GVL_Project.Gc_xVirtualMulticarrier THEN\n\t\t\t\tSR_ReadControlLoopParameter.ReadParameter();\n\t\t\t\tiStateInitMultiCarrier := 15;\n\t\t\tELSE\n\t\t\t\tiStateInitMultiCarrier := 30;\n\t\t\tEND_IF\n\t\tEND_IF\t\n\n\t//-------------------------------------------------------------------------------------------------------------------------------------------\n\t15: //--- Wait for ReadParameterSuccessful\n\t\tIF SR_ReadControlLoopParameter.q_xReadParameterDone THEN\n\t\t\t//--- Note on the read parameters:\n\t\t\t\t\t//--- After switching on -> the default values are read\n\t\t\t\t\t//--- If the system is switched on and only the sercos has been reset, the last written values are read.\n\t\t\tSR_ReadControlLoopParameter.GetParameter(\n\t\t\t\t\tq_dwPosP_Straight\t=> dwPosP_Straight, \n\t\t\t\t\tq_dwVelP_Straight\t=> dwVelP_Straight, \n\t\t\t\t\tq_dwVelI_Straight\t=> dwVelI_Straight, \n\t\t\t\t\tq_dwPosP_Curve\t\t=> dwPosP_Curve, \n\t\t\t\t\tq_dwVelP_Curve\t\t=> dwVelP_Curve, \n\t\t\t\t\tq_dwVelI_Curve\t\t=> dwVelI_Curve, \n\t\t\t\t\tq_dwMaxCurr\t\t\t=> dwMaxCurr, \t \t\t\t\t\t\t// Maximum Current in Ampere \t\t\t\t(70 = 1 Ampere )\n\t\t\t\t\tq_dwMaxload\t\t\t=> dwMaxload,   \t\t\t\t\t\t// load in gramm\t\t\t\t    \t\t(Empty Carrier = 800 gramm )\n\t\t\t\t\tq_dwDeviationLevelWarning\t=> dwDeviationLevelWarning,  \t// Warning TrackingDeviation in Increments \t(1600 Increments = 1mm)\n\t\t\t\t\tq_dwDeviationLevelError\t\t=> dwDeviationLevelError);\t  \t// Error TrackingDeviation in Increments \t(1600 Increments = 1mm)\n\t\t\t\t\n\t\t\tiStateInitMultiCarrier\t:= 18;\n\t\tELSIF SR_ReadControlLoopParameter.q_xReadParameterError THEN\n\t\t\txError\t\t\t\t\t\t\t\t:= TRUE;\n\t\t\tstMachineInterface.q_udiDiagExt  \t:= ET_DiagExt.UnexpectedFeedback;\n\t\t\tstMachineInterface.q_sMsg\t\t\t:= Concat('SR_ReadControlLoopParameter: Result: ' , TO_STRING(SR_ReadControlLoopParameter.diResultSercosReadServiceData) ); \n\t\t\tiStateInitMultiCarrier \t\t\t\t:= 1000;\n\t\tEND_IF\n\t\t\n\t//-------------------------------------------------------------------------------------------------------------------------------------------\n\t18:\t//--- Write Control Loop Parameter\n\t\tIF G_ifSercos.State = 2 THEN\n\t\t\tIF NOT GVL_Project.Gc_xVirtualMulticarrier THEN\n\t\t\t\t\n\t\t\t\t//--- set control loop parameters for trackcalibration\n\t\t\t\tIF \tGVL_Project.Gc_xTrackCalibrationOfMulticarrier THEN\n\t\t\t\t\tdwPosP_Straight := 500;\t\n\t\t\t\t\tdwVelP_Straight := 2000;\n\t\t\t\t\tdwVelI_Straight := 500;\n\t\t\t\t\tdwPosP_Curve \t:= 500;\t\n\t\t\t\t\tdwVelP_Curve \t:= 2000;\n\t\t\t\t\tdwVelI_Curve \t:= 500;\t\n\t\t\t\tELSE\n\t\t\t\t\t//-- modify read values if necessary:\n\t\t\t\t\tdwPosP_Straight;\t\n\t\t\t\t\tdwVelP_Straight;\n\t\t\t\t\tdwVelI_Straight;\n\t\t\t\t\tdwPosP_Curve;\n\t\t\t\t\tdwVelP_Curve;\n\t\t\t\t\tdwVelI_Curve;\n\t\t\t\t\tdwMaxCurr;\n\t\t\t\t\tdwMaxload;\n\t\t\t\t\tdwDeviationLevelWarning;\n\t\t\t\t\tdwDeviationLevelError;\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\t\t\tSR_WriteControlLoopParameter.StartAndSetParameter(\n\t\t\t\t\t\t\t\t\t\t\t\ti_dwPosP_Straight \t:= dwPosP_Straight,\n\t\t\t\t\t\t\t\t\t\t\t\ti_dwVelP_Straight \t:= dwVelP_Straight,\n\t\t\t\t\t\t\t\t\t\t\t\ti_dwVelI_Straight \t:= dwVelI_Straight,\n\t\t\t\t\t\t\t\t\t\t\t\ti_dwPosP_Curve \t\t:= dwPosP_Curve,\n\t\t\t\t\t\t\t\t\t\t\t\ti_dwVelP_Curve \t\t:= dwVelP_Curve,\n\t\t\t\t\t\t\t\t\t\t\t\ti_dwVelI_Curve \t\t:= dwVelI_Curve,\n\t\t\t\t\t\t\t\t\t\t\t\ti_dwMaxCurr\t\t\t:= dwMaxCurr,\n\t\t\t\t\t\t\t\t\t\t\t\ti_dwMaxload\t\t\t:= dwMaxload,\n\t\t\t\t\t\t\t\t\t\t\t\ti_dwDeviationLevelWarning \t:= dwDeviationLevelWarning,\n\t\t\t\t\t\t\t\t\t\t\t\ti_dwDeviationLevelError \t:= dwDeviationLevelError);\t\t\n\t\t\t\t\t\t\t\n\t\t\t\tiStateInitMultiCarrier := 20;\n\t\t\tELSE\n\t\t\t\tiStateInitMultiCarrier := 30;\n\t\t\tEND_IF\n\t\tEND_IF\t\n\t\t\t\n\t//-------------------------------------------------------------------------------------------------------------------------------------------\n\t20: //--- Wait for WriteParameterSuccessful\n\t\tIF SR_WriteControlLoopParameter.q_xWriteParameterDone THEN\n\t\t\tiStateInitMultiCarrier\t:= 30;\n\t\tELSIF SR_WriteControlLoopParameter.q_xWriteParameterError THEN\n\t\t\txError\t\t\t\t\t\t\t\t:= TRUE;\n\t\t\tstMachineInterface.q_udiDiagExt  \t:= ET_DiagExt.UnexpectedFeedback;\n\t\t\tstMachineInterface.q_sMsg\t\t\t:= Concat('SR_WriteControlLoopParameter: FC_SercosWriteServiceDataByTopAddr: Result: ' , TO_STRING(SR_WriteControlLoopParameter.diResultSercosWriteServiceData) ); \n\t\t\tiStateInitMultiCarrier \t\t\t\t:= 1000;\n\t\tEND_IF\n\t//-------------------------------------------------------------------------------------------------------------------------------------------\n\t30:\t//--- Set SercosPhase to 4\n\t\t\tCreateTrackForSimulation();\n\t\t\tIF GVL_Project.Gc_xVirtualMulticarrier THEN\n\t\t\t\tWriteGeometryOnSegments();\n\t\t\tEND_IF\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\tG_ifSercos.PhaseSet \t:= 4;\n\t\t\tiStateInitMultiCarrier\t:= 40;\n\t\t\t\n\t//-------------------------------------------------------------------------------------------------------------------------------------------\n\t40: //--- Wait Until Sercos State 4\n\t\tIF SystemConfiguration.G_ifSercos.State = 4 \n\t\tTHEN\n\t\t\tstMulticarrierModule.iq_xDoVirtualSetposAfterFirstProgramCall := TRUE;\n\t\t\t\n\t\t\tAPL.G_ifApplicationLogger.RegisterCommunicationService(\tq_etDiag => ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tq_etDiagExt => );\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tstMachineInterface.i_xEnable\t:= TRUE;\n\t\tEND_IF\n\t\t\n\t//-------------------------------------------------------------------------------------------------------------------------------------------\n\t1000: //--- ErrorState\n\t//-------------------------------------------------------------------------------------------------------------------------------------------\n\t\n\tEND_CASE\nEND_IF\n(* End of system generated code, could be modified for your application *)\n\n(* Application specific code *)\n(* ToDo: Add your application specific code here *)\n;\n(* End of application specific code *)","LineInfoPersistence":"(string)5f18f67e-367f-475b-9488-828a83e2dd17_Impl_LineIds"}}}},"UniqueIdGenerator":"(string)1480"}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","8ac092e5":"{8ac092e5-3128-4e26-9e7e-11016c6684f2}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}