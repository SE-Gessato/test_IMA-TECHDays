{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)9b393dbb-f7d2-4687-a44c-5e9410c52add","ParentGuid":"(Guid)12c1dc58-f677-4c4a-94db-2fd2a19f6f97","Name":"(string)SR_OpcUa","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)24568a24-c491-472c-a21f-ee5d33859fab","@Value":{"@Type":"24568a24","@Value":{"MemoryReserveForOnlineChange":"(int)0","ExcludeFromBuild":"(bool)False","External":"(bool)False","EnableSystemCall":"(bool)False","CompilerDefines":"(string)","LinkAlways":"(bool)False","Undefines":{"@Type":"[string]","@Value":[]}}}},{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)46bdc285-74cc-46a0-b19d-0c08bb47e86f"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"24568a24":"{24568a24-c491-472c-a21f-ee5d33859fab}","2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","bool":"System.Boolean","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","int":"System.Int32","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)// opc.tcp://*enter_PLC_IP_Address*:*enter_Port_nummber*\n// Port is 4840\n\n// Reset CycleCheckTime at the beginning of next cycle whenever it was increased\nIF diAddOverrunTimeSum > 0 OR diAddWDogTimeSum > 0 THEN\n\tSystemInterface.FC_CycleCheckTimeGet(iq_diOverrunTime := diOverrunTime, iq_diWDogFactor := diWDogTime);\n\tSystemInterface.FC_CycleCheckTimeSet(i_diOverrunTime := (diOverrunTime - diAddOverrunTimeSum), i_diWDogFactor := (diWDogTime - diAddWDogTimeSum));\n\t\n\tdiAddOverrunTimeSum := 0;\n\tdiAddWDogTimeSum := 0;\nEND_IF;\n\n\n// ---------------------------- START OPC UA SERVER ----------------------------------\nCASE byState OF\n\n\t0: \t// Wait until main programm is started\n\t\tIF SR_MainMachine.xInitSuccessful THEN\n\t\t\t// Activation/Deactivation of OPC UA fast access\n\t\t\tIF xActivateFastAcc THEN\n\t\t\t\tdiResultOpcUaSetAccessType := Systeminterface.FC_OpcUaSetAccessType(i_etOpcUaAccessType := ET_OpcUaAccessType.MEMORYACC);\n\t\t\tELSE\n\t\t\t\tdiResultOpcUaSetAccessType := Systeminterface.FC_OpcUaSetAccessType(i_etOpcUaAccessType := ET_OpcUaAccessType.IECVARACC);\n\t\t\tEND_IF\n\t\t\t\n\t\t\tbyState:=\t5;\n\t\tEND_IF\t\n\t\t\n\t5:\t// Start Command to start OPC UA Server\n\t\tIF xStartUaServer THEN\n\t\t\txCallOnceWhenStopServer := TRUE;\n\t\t\tSystemInterface.FC_FirewallSetActive(i_xActive := FALSE); \n\t\t\tbyState:=\t10;\n\t\tEND_IF\t\n\n\t10:\t// Increase CycleCheckTime for one Cycle\n\t\tdiAddOverrunTime := 500 ;\n\t\tdiAddWDogTime \t := 2000;\n\t\t\n\t\tSystemInterface.FC_CycleCheckTimeGet(iq_diOverrunTime := diOverrunTime, iq_diWDogFactor := diWDogTime);\n\t\tSystemInterface.FC_CycleCheckTimeSet(i_diOverrunTime := (diOverrunTime + diAddOverrunTime), i_diWDogFactor := (diWDogTime + diAddWDogTime));\n\t\t\n\t\tdiAddOverrunTimeSum := diAddOverrunTimeSum + diAddOverrunTime;\n\t\tdiAddWDogTimeSum := diAddWDogTimeSum + diAddWDogTime;\n\t\t\n\t\t// Start OPC UA server \n\t\tdiResultStartOpcUa := SystemInterface.FC_OpcUaStart('Schneider','ou1337tmp');\t\n\t\n\t\tbyState:=\t20;\n\t\t\n\t20:\tCASE diResultStartOpcUa  OF\n\n\t\t\t0:\tbyState\t:=\t30;\t//The OPC UA server is started.\n\t\t\t           \t\n\t\t\t1:\tbyState\t:=\t31;\t//The standard- user name and password is active.\n\t\t\t\t\t\t\t\t\t//Standard user name: Schneider\n\t\t\t\t\t\t\t\t\t//Standard password: ou1337tmp\n\t\t\t\t\t\t\t\t\t\n\t\t\t-1:\tbyState\t:=\t32;\t//The OPC UA server is already running.\t\t\t\t\n\t                   \t\n\t\t\t-4:\tbyState\t:=\t33;\t//An invalid combination of username and password e.g. one part empty.\n\t\t\t\t\t\t\t\t//The standard- user name and password is used. Standard user name: Schneider. Standard password: ou1337tmp\n\t\tEND_CASE\t\t\t\t\t\n\t\t\nEND_CASE\n\n// ---------------------------- STOP OPC UA SERVER ----------------------------------\nIF xStartUaServer = FALSE AND byState > 0 THEN\n\t\n\t\tdiAddOverrunTime := 500 ;\n\t\tdiAddWDogTime := 2000;\n\t\t\n\t\tSystemInterface.FC_CycleCheckTimeGet(iq_diOverrunTime := diOverrunTime, iq_diWDogFactor := diWDogTime);\n\t\t// Only call once when the server is stopped\n\t\tIF xCallOnceWhenStopServer THEN\n\t\t\tSystemInterface.FC_CycleCheckTimeSet(i_diOverrunTime := (diOverrunTime + diAddOverrunTime), i_diWDogFactor := (diWDogTime + diAddWDogTime));\n\t\t\txCallOnceWhenStopServer := FALSE;\n\t\tEND_IF\n\t\t\n\t\tdiAddOverrunTimeSum := diAddOverrunTimeSum + diAddOverrunTime;\n\t\tdiAddWDogTimeSum := diAddWDogTimeSum + diAddWDogTime;\n\t\t\n\t\t// Stop OPC UA Server\t\n\t\tdiResultStopOpcUa := SystemInterface.FC_OpcUaStop();\n\t\t\n\t\tbyState:=\t5;\nEND_IF\t\n\n// -------------------------------UA Diagnostic------------------------------\nSystemInterface.FC_OpcUaGetServerConfig(iq_stOpcUaServerConfig\t:= stOpcUaServerConfig);","LineInfoPersistence":"(string)9b393dbb-f7d2-4687-a44c-5e9410c52add_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)PROGRAM SR_OpcUa\nVAR\n\tbyState\t\t\t\t\t\t: BYTE := 0;\n\t///Control OPC UA \n\tdiResultStartOpcUa\t\t\t: DINT := 0;\n\tdiResultStopOpcUa\t\t\t: DINT := 0;\n\txStartUaServer\t\t\t\t: BOOL := TRUE;\n\tstOpcUaServerConfig\t\t\t: SystemInterface.ST_ExternalOpcUaServerConfig;\n\txCallOnceWhenStopServer\t\t: BOOL := TRUE;\n\t///Fast Item access on/off -> if 'off' no Parameter access via OPC UA supported\n\txActivateFastAcc\t\t\t: BOOL := TRUE;\n\tdiResultOpcUaSetAccessType\t: DINT;\n\t///Control Cycle Time check\n\tdiAddOverrunTimeSum\t\t\t: DINT := 0;\n\tdiAddWDogTimeSum\t\t\t: DINT := 0;\n\tdiOverrunTime\t\t\t\t: DINT;\n\tdiWDogTime\t\t\t\t\t: DINT;\n\tdiAddOverrunTime\t\t\t: DINT;\n\tdiAddWDogTime\t\t\t\t: DINT;\n\tEND_VAR\n","LineInfoPersistence":"(string)9b393dbb-f7d2-4687-a44c-5e9410c52add_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)700","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}