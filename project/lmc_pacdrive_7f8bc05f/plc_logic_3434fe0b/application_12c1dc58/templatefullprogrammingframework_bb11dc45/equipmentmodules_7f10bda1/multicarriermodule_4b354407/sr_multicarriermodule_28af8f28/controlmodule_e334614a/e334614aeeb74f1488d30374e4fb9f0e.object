{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)e334614a-eeb7-4f14-88d3-0374e4fb9f0e","ParentGuid":"(Guid)28af8f28-add1-40f0-881f-036441eaaef2","Name":"(string)ControlModule","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)8ac092e5-3128-4e26-9e7e-11016c6684f2","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"8ac092e5","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//-- recognize error *)\nfbRTrigError(CLK := xErrorActive);\n\n//-- recognize change of OpMode or command *)\nfbRTrigCMDActive(CLK := iq_stStandardModuleItf.q_xCMDActive);\n\t\n//-- new command -> goto opmode selection state\nIF fbRTrigCMDActive.Q THEN\t\n\tExitLastOpMode();\n\tiStateOpMode\t:= 10;\nEND_IF\n\n//-- error -> goto error state\nIF fbRTrigError.Q THEN\n\tStoreCurrentMoveCmds();\n\tiStateOpMode\t:= 1000;\nEND_IF\n\t\n\t\n\n(*****************************************************************************************)\n(*                                    Statemachine                                    \t *)\n(*****************************************************************************************)\n\nCASE iStateOpMode OF\n\n//--------------------------------------------------------------------------------------------------------------\n0:    //--- Wait\n\t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_sDiagExt := 'Wait for cmd';\n\n//-------------------------------------------------------------------------------------------------------------\n10:\t  //--- select Opmode \n\t//\n\t\tIF (iq_stStandardModuleItf.q_diCMDActive = ET_Cmd.Auto) THEN\n\t\t\tetLastCmd    := ET_Cmd.Auto;\n\t\t\tiStateOpMode := 100;\n\t\tELSIF (iq_stStandardModuleItf.q_diCMDActive = ET_Cmd.Prepare) THEN\n\t\t\tetLastCmd    := ET_Cmd.Prepare;\n\t\t\tiStateOpMode := 200;\n\t\tELSIF (iq_stStandardModuleItf.q_diCMDActive = ET_Cmd.TestMulticarrier) THEN\n\t\t\tetLastCmd    := ET_Cmd.TestMulticarrier;\n\t\t\tiStateOpMode := 300;\n\t\tELSIF (iq_stStandardModuleItf.q_diCMDActive = ET_Cmd.TrackCalibration) THEN\n\t\t\tetLastCmd    := ET_Cmd.TrackCalibration;\n\t\t\tiStateOpMode := 400;\n\t\tELSIF (iq_stStandardModuleItf.q_diCMDActive = ET_Cmd.Manual) THEN\n\t\t\tetLastCmd    := ET_Cmd.Manual;\n\t\t\tiStateOpMode := 600;\n\t\tELSIF (iq_stStandardModuleItf.q_diCMDActive = ET_Cmd.Stop) THEN\n\t\t\tetLastCmd    := ET_Cmd.Stop;\n\t\t\tiStateOpMode := 800;\n\t\tELSIF (iq_stStandardModuleItf.q_diCMDActive = ET_Cmd.Abort) THEN\n\t\t\tetLastCmd    := ET_Cmd.Abort;\n\t\t\tiStateOpMode := 900;\n\t\tELSE\n\t\t\tiStateOpMode := 0;\n\t\tEND_IF\n\t\t\n//-------------------------------------------------------------------------------------------------------------\n100:  //--- OpMode Automatic\n\t //--- Entry OpMode / Init  \n\t\t\tiq_stStandardModuleItf.iq_diStartStep := iq_stStandardModuleItf.iq_stExt.diActiveStep + 10;\n\t\t\tiStateOpMode := 110;\n\t\t\t\n\t110:\t//--- Automatic active\n\t\t\tIF \t\tNOT iq_stStandardModuleItf.q_xCMDActive\n\t\t\t\tAND iq_stStandardModuleItf.q_xCmdDone\n\t\t\t\tAND astSubModuleInterface[c_udiMultiCarrierTrack].q_xActive\n\t\t\tTHEN\n\t\t\t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_sDiagExt := 'Multicarrier Running';\n\t\t\t\tuiSetOpModeVis \t\t\t\t:= ET_OpModeVis.Auto;\n\t\t\t\txSetStationTriggerViaTimer\t:= FALSE;\n\t\t\t\txStartFbCrashPrevention\t\t:= TRUE;\n\t\t\t\tiStateOpMode \t\t\t\t:= 120;\n\t\t\tEND_IF\n\t\t\t\n\t120:\t//--- cyclic call  \n\t\t\tCallAllStations();\n\n//-------------------------------------------------------------------------------------------------------------\n200:  //--- OpMode Prepare\n\t //---  Entry OpMode / Init  \n\t\txHomingWasSuccessful\t:= FALSE; \n\t\txControlEnable\t\t\t:= TRUE; \n\t\t\n\t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_sDiagExt := 'Prepare running';\n\t\tiStateOpMode := 210;\n\t\t\t\n\t210:\t//--- call parameter of station1\n\t\t\tIF \t\txWaitForStartStep\n\t\t\t\tAND\txEnableTrackSuccessful \n\t\t\t\tAND NOT astSubModuleInterface[c_udiMultiCarrierTrack].q_xCmdActive \n\t\t\tTHEN\n\t\t\t\tiStateOpMode := 220;\n\t\t\tEND_IF\n\t\t\t\t\n\t220:\t//--- Wait until FB_Multicarrier is Ready \n\t\t\tIF \t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xActive \n\t\t\t\tAND\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xReady\n\t\t\t\tAND\tetResultFbMulticarrier = MCR.ET_Result.Working\n\t\t\tTHEN\n\t\t\t\tIF GVL_Project.Gc_xVirtualMulticarrier AND iq_stMulticarrierModule.iq_xDoVirtualSetposAfterFirstProgramCall THEN\t\n\t\t\t\t\tiStateOpMode := 230;\n\t\t\t\tELSE\n\t\t\t\t\tiStateOpMode := 240;\n\t\t\t\tEND_IF\t\t\n\t\t\tEND_IF\n\t\t\t\n\t230:\t//--- in case of virtual multicarrer -> setpos on all carriers\n\t\t\tIF VirtualSetPosOfAllCarriers() THEN\n\t\t\t\tiq_stMulticarrierModule.iq_xDoVirtualSetposAfterFirstProgramCall := FALSE;\n\t\t\t\tiStateOpMode := 240;\n\t\t\tEND_IF\n\t\t\t\n\t240:\t//--- move carriers in first station\n\t\t\tDeleteAllCarriersFromStations();\n\t\t\tParameterStation1();\n\t\t\tMoveAllCarriersInFirstStation();\n\t\t\tIF NOT xSetException THEN\n\t\t\t\tiStateOpMode := 250;\n\t\t\tEND_IF\n\t\t\t\n\t\t\t\n\t250:\t//--- Reset wait step of cmd-table\n\t\t\tIF \t\txWaitForStartStep \n\t\t\t\tAND\tNOT ifMulticarrier.ifFeedback.xMotionActiveAnyCarrier\n\t\t\tTHEN\n\t\t\t\tiq_stStandardModuleItf.iq_diStartStep := iq_stStandardModuleItf.iq_stExt.diActiveStep + 10;\n\t\t\t\tiStateOpMode := 260;\n\t\t\tEND_IF\n\t\t\t\t\n\t260:\t//--- End cmd table \n\t\t\tIF \t\tNOT iq_stStandardModuleItf.q_xCMDActive\n\t\t\t\tAND\tiq_stStandardModuleItf.q_xCmdDone \n\t\t\tTHEN\t\n\t\t\t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_sDiagExt := 'Prepare done';\n\t\t\t\txHomingWasSuccessful\t:= TRUE; \n\t\t\t\tiStateOpMode\t:= 0;\t\t\t\n\t\t\tEND_IF\n\n\n//-------------------------------------------------------------------------------------------------------------\n300:  //--- OpMode TestMulticarrier\n\t //---  Entry OpMode / Init  \n\t\t\txControlEnable\t\t\t:= TRUE; \n\t\t\txHomingWasSuccessful\t:= FALSE; \n\t\t\tiStateOpMode \t\t\t:= 310;\n\n\t310:\t//--- Wait until FB_Multicarrier is Ready \n\t\t\tIF \t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xActive \n\t\t\t\tAND\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xReady\n\t\t\t\tAND\tetResultFbMulticarrier = MCR.ET_Result.Working\n\t\t\tTHEN\n\t\t\t\tuiSetOpModeVis \t:= ET_OpModeVis.Test;\n\t\t\t\tDeleteAllCarriersFromStations();\n\t\t\t\tiStateOpMode \t:= 320;\n\t\t\tEND_IF\n\t\t\t\n\t320:\t//--- check for virtual setpos\n\t\t\tIF GVL_Project.Gc_xVirtualMulticarrier  AND_THEN iq_stMulticarrierModule.iq_xDoVirtualSetposAfterFirstProgramCall THEN\t\n\t\t\t\tiStateOpMode := 330;\n\t\t\tELSE\n\t\t\t\tiStateOpMode := 340;\n\t\t\t\tStopAllCarriers();\n\t\t\tEND_IF\t\t\n\t\t\t\n\t330:\t//--- in case of virtual multicarrer -> setpos on all carriers\n\t\t\tIF VirtualSetPosOfAllCarriers() THEN\n\t\t\t\tiq_stMulticarrierModule.iq_xDoVirtualSetposAfterFirstProgramCall := FALSE;\n\t\t\t\tiStateOpMode := 340;\n\t\t\tEND_IF\n\t\t\t\n\t340:\tIF\txWaitForStartStep THEN\n\t\t\t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_sDiagExt := 'Test Multicarrier Running';\n\t\t\t\t//--- reset wait step of cmd-table\n\t\t\t\tiq_stStandardModuleItf.iq_diStartStep := iq_stStandardModuleItf.iq_stExt.diActiveStep + 10;\n\t\t\t\t\n\t\t\t\tiStateOpMode := 350;\n\t\t\tEND_IF\n\t\t\t\n\t350:\t//--- cyclic call of test stations \n\t\t\tSR_CallTestStations(\n\t\t\t\t\ti_etTraceSource\t\t:= etTraceSource,\n\t\t\t\t\ti_ifMultiCarrier\t:= fbMulticarrier,\n\t\t\t\t\ti_xStart\t\t\t:= xStartTest,\n\t\t\t\t\ti_xStop\t\t\t\t:= xStopTest,\n\t\t\t\t\tq_xError\t\t\t=> xSetException,\n\t\t\t\t\tq_sEtResult\t\t\t=> stException.sDiagExt,\n\t\t\t\t\tq_sResultMsg\t\t=> sResultMsgMCR);\t\n\t\t\t\t\t\n//-------------------------------------------------------------------------------------------------------------\n400:  //--- OpMode TrackCalibration\n\t //---  Entry OpMode / Init  \n\t\t\txControlEnable\t\t\t:= TRUE; \n\t\t\txHomingWasSuccessful\t:= FALSE; \n\t\t\tiStateOpMode \t\t\t:= 410;\n\n\t410:\t//--- Wait until FB_Multicarrier is Ready \n\t\t\tIF \t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xActive \n\t\t\t\tAND\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xReady\n\t\t\t\tAND\tetResultFbMulticarrier = MCR.ET_Result.Working\n\t\t\tTHEN\n\t\t\t\tuiSetOpModeVis \t:= ET_OpModeVis.TrackCalibration;\n\t\t\t\tDeleteAllCarriersFromStations();\n\t\t\t\tiStateOpMode \t:= 420;\n\t\t\tEND_IF\n\t\t\t\n\t420:\t//--- Enable FB_TrackCalibration\n\t\t\tStopAllCarriers();\n\t\t\txEnableFbTrackCalibration \t:= TRUE;\n\t\t\txStartFbTrackCalibration\t:= TRUE;\n\t\t\tiStateOpMode := 430;\n\t\t\t\n\t430:\t//--- Check if FB_TrackCalibration is active and ready\n\t\t\tIF xActiveFbTrackCalibration\n\t\t\tAND xReadyFbTrackCalibration\n\t\t\tTHEN\n\t\t\t\tiStateOpMode := 440;\n\t\t\tEND_IF\n\t\t\t\n\t440:\tIF\txWaitForStartStep THEN\n\t\t\t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_sDiagExt := 'TrackCalibration';\n\t\t\t\t//--- reset wait step of cmd-table\n\t\t\t\tiq_stStandardModuleItf.iq_diStartStep := iq_stStandardModuleItf.iq_stExt.diActiveStep + 10;\n\t\t\t\t\n\t\t\t\tiStateOpMode := 450;\n\t\t\tEND_IF\n\t\t\t\n\t450:\t//--- cyclic call of SR_CallTrackCalibration\n\t\t\tTrackCalibration_Logic();\n\t\t\t\n//-------------------------------------------------------------------------------------------------------------\n600:  //--- OpMode Manual \n\t //---  Entry OpMode / Init  \n\t\t\txControlEnable\t\t\t:= TRUE; \n\t\t\txHomingWasSuccessful\t:= FALSE; \n\t\t\tiStateOpMode \t\t\t:= 610;\n\t\t\t\n\t610:\t//--- wait for FB_Multicarrier is ready\n\t\t\tIF \t\txWaitForStartStep \t\n\t\t\t\tAND\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xActive \n\t\t\t\tAND\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xReady\n\t\t\t\tAND\tetResultFbMulticarrier = MCR.ET_Result.Working\n\t\t\tTHEN\n\t\t\t\tIF GVL_Project.Gc_xVirtualMulticarrier AND_THEN iq_stMulticarrierModule.iq_xDoVirtualSetposAfterFirstProgramCall THEN\t\n\t\t\t\t\tiStateOpMode := 620;\n\t\t\t\tELSE\n\t\t\t\t\t//--- reset wait step of cmd-table\n\t\t\t\t\tiq_stStandardModuleItf.iq_diStartStep := iq_stStandardModuleItf.iq_stExt.diActiveStep + 10;\t\n\t\t\t\t\tiStateOpMode := 630;\n\t\t\t\tEND_IF\t\t\n\t\t\tEND_IF\n\t\t\t\n\t620:\t//--- in case of virtual multicarrer -> setpos on all carriers\n\t\t\tIF VirtualSetPosOfAllCarriers() THEN\n\t\t\t\tiq_stMulticarrierModule.iq_xDoVirtualSetposAfterFirstProgramCall := FALSE;\n\t\t\t\t//--- reset wait step of cmd-table\n\t\t\t\tiq_stStandardModuleItf.iq_diStartStep := iq_stStandardModuleItf.iq_stExt.diActiveStep + 10;\t\n\t\t\t\tiStateOpMode := 630;\n\t\t\tEND_IF\n\t\t\t\n\t630:\t//--- Manual is active\n\t\t\tIF \t\tNOT iq_stStandardModuleItf.q_xCMDActive\n\t\t\t\tAND\tiq_stStandardModuleItf.q_xCmdDone \n\t\t\tTHEN\t\n\t\t\t\t//--- initialize manual mode\t\n\t\t\t\tuiSetOpModeVis := ET_OpModeVis.Manual;\n\t\t\t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_sDiagExt := 'Manual running';\n\t\t\t\tManual_Entry();\n\t\t\t\tiStateOpMode\t:= 640;\n\t\t\tEND_IF\n\t\t\t\n\t640:\t//--- cyclic call\n\t\t\tManual_Logic();\n\n//-------------------------------------------------------------------------------------------------------------\n800:  //--- OpMode Stop \n\t//\n\t\t\tIF \t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xActive \n\t\t\t\tAND\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xReady\n\t\t\t\tAND\tetResultFbMulticarrier = MCR.ET_Result.Working\n\t\t\tTHEN\n\t\t\t\tSR_CallTestStations.ResetStateAndTrigger();\n\t\t\t\tStopAllCarriers();\n\t\t\t\tiStateOpMode\t:= 810;\t\n\t\t\tELSE\n\t\t\t\t//--- reset wait step of cmd-table\n\t\t\t\tiq_stStandardModuleItf.iq_diStartStep := iq_stStandardModuleItf.iq_stExt.diActiveStep + 10;\n\t\t\t\tiStateOpMode\t:= 820;\t\n\t\t\tEND_IF\n\t\t\t\n\t810:\tIF NOT ifMulticarrier.ifFeedback.xMotionActiveAnyCarrier THEN\n\t\t\t\txStartFbCrashPrevention\t:= FALSE;\n\t\t\t\txEnableFbTrackCalibration\t:= FALSE;\n\t\t\t\txStartFbTrackCalibration\t:= FALSE;\n\t\t\t\t\n\t\t\t\t//--- reset wait step of cmd-table\n\t\t\t\tiq_stStandardModuleItf.iq_diStartStep := iq_stStandardModuleItf.iq_stExt.diActiveStep + 10;\n\t\t\t\tiStateOpMode\t:= 820;\t\n\t\t\tEND_IF\n\t\t\t\n\t\t\t\n \t820:\t//--- End cmd table \n\t\t\tIF \t\tNOT iq_stStandardModuleItf.q_xCMDActive\n\t\t\t\tAND\tiq_stStandardModuleItf.q_xCmdDone \n\t\t\tTHEN\t\n\t\t\t\txHomingWasSuccessful\t:= FALSE; \n\t\t\t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_sDiagExt := 'Stop done';\n\t\t\t\tuiSetOpModeVis \t:= ET_OpModeVis.None;\n\t\t\t\tiStateOpMode\t:= 0;\t\t\t\n\t\t\tEND_IF\n\t\t\t\n//-------------------------------------------------------------------------------------------------------------\n900:  //--- OpMode Abort \n\t//\n\t\t\tIF \t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xActive \n\t\t\t\tAND\tastSubModuleInterface[c_udiMultiCarrierTrack].q_xReady\n\t\t\t\tAND\tetResultFbMulticarrier = MCR.ET_Result.Working\n\t\t\tTHEN\n\t\t\t\tSR_CallTestStations.ResetStateAndTrigger();\n\t\t\t\tStopAllCarriers();\n\t\t\t\tiStateOpMode\t:= 910;\t\n\t\t\tELSE\n\t\t\t\t//--- reset wait step of cmd-table\n\t\t\t\tiq_stStandardModuleItf.iq_diStartStep := iq_stStandardModuleItf.iq_stExt.diActiveStep + 10;\n\t\t\t\tiStateOpMode\t:= 920;\t\n\t\t\tEND_IF\n\t\t\t\n\t910:\tIF NOT ifMulticarrier.ifFeedback.xMotionActiveAnyCarrier THEN\n\t\t\t\txStartFbCrashPrevention\t:= FALSE;\n\t\t\t\t//--- reset wait step of cmd-table\n\t\t\t\tiq_stStandardModuleItf.iq_diStartStep := iq_stStandardModuleItf.iq_stExt.diActiveStep + 10;\n\t\t\t\tiStateOpMode\t:= 920;\t\n\t\t\tEND_IF\n\t\t\t\n\t\t\t\n \t920:\t//--- End cmd table \n\t\t\tIF \t\tNOT iq_stStandardModuleItf.q_xCMDActive\n\t\t\t\tAND\tiq_stStandardModuleItf.q_xCmdDone \n\t\t\tTHEN\t\n\t\t\t\txHomingWasSuccessful\t:= FALSE; \n\t\t\t\tastSubModuleInterface[c_udiMultiCarrierTrack].q_sDiagExt := 'Abort done';\n\t\t\t\tuiSetOpModeVis \t:= ET_OpModeVis.None;\n\t\t\t\tiStateOpMode\t:= 0;\t\t\t\n\t\t\tEND_IF\n\t\t\t\n//-------------------------------------------------------------------------------------------------------------\n1000: //--- Command Error \n\t//\n\t\t\t//-- reset homing signal\n\t\t\txHomingWasSuccessful\t\t\t:= FALSE; \n\t\t\t//-- stop all Carriers and disable track in Action ControlEnable \n\t\t\txControlEnable\t\t\t\t\t:= FALSE;\n\t\t\t\n\t\t\t//-- reset vis\n\t \t\tuiSetOpModeVis \t:= ET_OpModeVis.None;\n\t\t\tiStateOpMode\t:= 1010;\n\t\t\t\n\t1010:\t//--  Wait for acknowledge of the fault \n\t\t\tIF iq_stStandardModuleItf.i_xDiagQuit THEN\n\t\t\t\t//--  Reset Error \n\t\t\t\tErrorQuitStations();\t\t\t\t\n\t\t\t\txSetException\t\t\t\t:= FALSE;\n\t\t\t\txErrorStored\t\t\t\t:= FALSE;\n\t\t\t\t\n\t\t\t\tstException.udiDiagExt\t\t:= 0;\n\t\t\t\tstException.sDiagExt\t\t:= '';\n\t\t\t\tstException.sMsg\t\t\t:= '';\n\t\t\t\tsResultMsgMCR\t\t\t\t:= '';\n\t\t\t\tsResultMsg1\t\t\t\t\t:= '';\n\t\t\t\tsResultMsg2\t\t\t\t\t:= '';\n\t\t\t\tsResultMsg3\t\t\t\t\t:= '';\n\t\t\t\t\n\t\t\t\tSR_CallTestStations.ErrorQuit();\n\t\t\t\tiStateOpMode\t:= 0;\n\t\t\tEND_IF\n//-------------------------------------------------------------------------------------------------------------\n\nEND_CASE","LineInfoPersistence":"(string)e334614a-eeb7-4f14-88d3-0374e4fb9f0e_Impl_LineIds"}}}},"UniqueIdGenerator":"(string)3696"}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","8ac092e5":"{8ac092e5-3128-4e26-9e7e-11016c6684f2}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}