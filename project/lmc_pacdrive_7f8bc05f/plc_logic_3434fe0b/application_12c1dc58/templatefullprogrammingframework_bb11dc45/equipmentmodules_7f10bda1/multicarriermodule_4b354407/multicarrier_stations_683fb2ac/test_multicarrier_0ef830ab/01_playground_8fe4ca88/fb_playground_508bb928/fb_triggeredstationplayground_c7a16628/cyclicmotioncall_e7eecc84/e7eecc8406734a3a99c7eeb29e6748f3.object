{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)e7eecc84-0673-4a3a-99c7-eeb29e6748f3","ParentGuid":"(Guid)c7a16628-ed71-4e8f-99cd-4a94439c8b42","Name":"(string)CyclicMotionCall","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)f8a58466-d7f6-439f-bbb8-d4600e41d099","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"f8a58466","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)CASE iState OF\n\n//-------------------------------------------------------------------------------------------------------------------\t\n0://--- Wait for Carrier in Station ---\t\n\t//\n\t//--- Check for additional Steps in Station ---------------------------------------\n\t\tIF THIS^.lrProcessGap > 0 AND THIS^.udiNrOfCarrierInProcess > 0\n\t\tTHEN\n\t\t\tiState := 5;\n\t\t\t\n\t//--- no additional Steps in Station ---------------------------------------\n\t\tELSIF  iq_xMoveCarrierOutOfStation AND THIS^.udiNumberOfCarriersInStationTotal > 0\n\t\tTHEN\n\t\t\t//--- get Carrier -----\n\t\t\tGetStationCarrier(i_udiElementNumber := 1);\n\t\t\t\t\n\t\t\tIF\tNOT THIS^.xError_loc THEN\n\t\t\t\tiState := 100;\n\t\t\tEND_IF\n\t\tEND_IF\n\t\t\n//-------------------------------------------------------------------------------------------------------------------\t\n5://--- Wait for enough Carrier in Station ---\t\n\t\tIF  THIS^.udiNumberOfCarriersInStationTotal >=  THIS^.udiNrOfCarrierInProcess \n\t\t\tAND  THIS^.udiNrOfCarrierInProcess > 0\n\t\tTHEN\n\t\t\tGetStationCarrier(i_udiElementNumber := THIS^.udiNrOfCarrierInProcess);\n\t\t\t\n\t\t\t//--- last Carrier in process was sent with MoveGap\n\t\t\tIF THIS^.ifCarrier <> 0 AND_THEN (THIS^.ifCarrier.ifFeedback.etCurrentMoveCommand = MCR.ET_MoveCommand.MoveGapControl OR_ELSE THIS^.udiNrOfCarrierInProcess = 1)\n\t\t\tTHEN\n\t\t\t\tiState := 16;\n\t\t\t\t\n\t\t\t//--- last Carrier in process was sent with MoveSync\n\t\t\tELSIF THIS^.ifCarrier <> 0 AND_THEN THIS^.ifCarrier.ifFeedback.etCurrentMoveCommand = MCR.ET_MoveCommand.MoveSyncFromStandstill \n\t\t\tTHEN\n\t\t\t\tGetStationCarrier(i_udiElementNumber := 1);\n\t\t\t\t\n\t\t\t\tIF\tNOT THIS^.xError_loc THEN\n\t\t\t\t\tiState := 17;\n\t\t\t\tEND_IF\t\t\t\t\n\t\t\tEND_IF\t\t\t\t\n\t\t\t\n\t\tELSIF  THIS^.udiNrOfCarrierInProcess = 0 THEN \n\t\t\tiState := 0;\n\t\tEND_IF\n\t\t\n//-------------------------------------------------------------------------------------------------------------------\t\n16: //--- All Carrier were send with MoveGap: Send with MoveGap all Carrier into process ---\n\t\t//\n\t\tAddMessageToAPL('Move all Carrier into station '); \n\t\t\n\t\t//--- send commands for Carrier -----------------------------\n\t\t\tFOR udiLoop :=  1 TO THIS^.udiNrOfCarrierInProcess DO\n\t\t\t\t//\n\t\t\t\t//--- move additional steps in Station\n\t\t\t\t\tGetStationCarrier(i_udiElementNumber := udiLoop);\n\t\t\t\t\t\t\n\t\t\t\t//--- store first carrier for state 20 and ask him for in end target \n\t\t\t\t\tIF \tNOT THIS^.xError_loc AND udiLoop = 1\n\t\t\t\t\tTHEN\n\t\t\t\t\t\tifFirstCarrierInStation := THIS^.ifCarrier;\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\t\t\t\t//--- MoveGap -----------------------\t\n\t\t\t\t\tMoveGap(\n\t\t\t\t\t\ti_etPosMode\t\t\t:= THIS^.etPosMode, \n\t\t\t\t\t\ti_lrTargetGap\t\t:= THIS^.lrProcessGap, \n\t\t\t\t\t\ti_lrTarget\t\t\t:= THIS^.lrProcessPosInStation);\n\t\t\t\t//\t\n\t\t\tEND_FOR\n\t\t\t\t\n\t\t//--- All steps done ------\n\t\t\tIF \tNOT THIS^.xError_loc THEN\n\t\t\t\tiState \t:= 20;\n\t\t\tEND_IF\n\t\t\t\n//-------------------------------------------------------------------------------------------------------------------\t\n17: //--- Carrier were send with MoveGap + MoveSync: Just enough to send Master-Carrier with MoveGap into process ---\n\t\t//\n\t\t//--- Wait for Carrier -----------------------------\n\t\t\tAddMessageToAPL('Move Carrier Master into station '); \n\t\t\t//\n\t\t//--- get carrier -----------------------\t\n\t\t\tGetStationCarrier(i_udiElementNumber := 1);\n\t\t\n\t\t//--- MoveGap -----------------------\t\n\t\t\tMoveGap(\n\t\t\t\ti_etPosMode\t\t\t:= THIS^.etPosMode, \n\t\t\t\ti_lrTargetGap\t\t:= THIS^.lrProcessGap, \n\t\t\t\ti_lrTarget\t\t\t:= THIS^.lrProcessPosInStation);\n\t\t\t\t\n\t\t//--- All steps done ------\n\t\t\tIF \tNOT THIS^.xError_loc THEN\n\t\t\t\tiState \t:= 21;\n\t\t\tEND_IF\n\t\t\t\t\n//-------------------------------------------------------------------------------------------------------------------\t\n20,21:\t//--- check if last Carrier is in Process Pos standstill --- \n\t\t//\n\t\t//--- check for in Target... ----\n\t\t\t//--- ... in case of MoveGap + MoveSync\n\t\t\tIF THIS^.udiNrOfCarrierInProcess = 1 OR iState = 21\n\t\t\tTHEN\n\t\t\t\t\txAllCarrierinStation := THIS^.ifCarrier.ifFeedback.ifFeedbackMoveGapControl.xInEndTargetPosition;\n\t\t\t\t\t\n\t\t\t//--- ... in case of all MoveGap \n\t\t\tELSE\n\t\t\t\t\txAllCarrierinStation := ifFirstCarrierInStation.ifFeedback.ifFeedbackMoveGapControl.xInEndTargetPosition;\n\t\t\t\t\txAllCarrierinStation := xAllCarrierinStation AND THIS^.ifCarrier.ifFeedback.ifFeedbackMoveGapControl.xInTemporaryTargetPosition;\n\t\t\tEND_IF\n\t\t\t\n\t\t//--- goto next state ----\n\t\t\tIF xAllCarrierinStation \n\t\t\tTHEN\n\t\t\t\tiState := 30;\n\t\t\tEND_IF\n\n//-------------------------------------------------------------------------------------------------------------------\t\n30://--- send carrier to next station ---\n\t//--- Wait for Trigger ---\n\t\tIF \tiq_xMoveCarrierOutOfStation \n\t\tTHEN\n\t\t\t\tAddMessageToAPL('Move Carrier out of Stations '); \n\t\t\t\t\n\t\t\t\t//--- set gap for carrier behind 1st carrier ---------\n\t\t\t\t\tIF \t\tTHIS^.xKeepProcessGapWhenLeaveStation \n\t\t\t\t\t\tAND\tTHIS^.udiNrOfCarrierInProcess > 1 \n\t\t\t\t\tTHEN\n\t\t\t\t\t\tlrGapToTargetStation := THIS^.lrProcessGap;\n\t\t\t\t\tELSE\n\t\t\t\t\t\tlrGapToTargetStation := THIS^.ifTargetStation.lrHandoverTargetGap;\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\t\t\t\t//--- set commands for movesync\n\t\t\t\t\tIF \t\tNOT THIS^.xError_loc \n\t\t\t\t\t\tAND THIS^.xMoveSyncWhenLeaveStation \n\t\t\t\t\tTHEN\n\t\t\t\t\t\tFOR udiLoop := 2 TO  THIS^.udiNrOfCarrierInProcess DO\t\n\t\t\t\t\t\t\t//\t\n\t\t\t\t\t\t\t//--- move sync  -----\n\t\t\t\t\t\t\t\tMoveSync(i_udiElementNumber \t  := udiLoop, \n\t\t\t\t\t\t\t\t\t\t i_xWithCurveCompensation := THIS^.xWithCurveCompensation);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tEND_FOR\t\t\n\t\t\t\t\t\n\t\t\t\t//--- set commands for 1st carrier\n\t\t\t\t\tMoveGapExtended(i_udiElementNumber \t:= 1, \n\t\t\t\t\t\t\t\t\t\ti_lrTargetGap \t\t:= lrGapToTargetStation); \n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t//--- send commands for move gap  -----\n\t\t\t\t\tELSIF NOT THIS^.xError_loc AND NOT THIS^.xMoveSyncWhenLeaveStation THEN\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tFOR udiLoop := 1 TO  THIS^.udiNrOfCarrierInProcess DO\t\n\t\t\t\t\t\t\t\t//--- send MoveGapControl ---------------------\n\t\t\t\t\t\t\t\t\tMoveGapExtended(i_udiElementNumber \t:= udiLoop, \n\t\t\t\t\t\t\t\t\t\t\t\t\ti_lrTargetGap \t\t:= SEL(udiLoop = 1,lrGapToTargetStation, THIS^.ifTargetStation.lrHandoverTargetGap)); \n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tEND_FOR\t\t\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\t//\t\n\t\t\t\t\t\t\t\n\t\t\t\t//--- Handover all Carrier to target station -----\n\t\t\t\t\tHandOverCarriers(i_udiNumberOfCarriers := THIS^.udiNrOfCarrierInProcess);\n\t\t\t\t\t\n\t\t\t\tIF NOT THIS^.xError_loc THEN\n\t\t\t\t\tiq_xMoveCarrierOutOfStation := FALSE;\n\t\t\t\t\tiState := 0;\t\n\t\t\t\tEND_IF\n\t\tEND_IF\t\t\t\t\t\t\t\t\t\t\t\t\n//-------------------------------------------------------------------------------------------------------------------\t\n100://--- send Carrier to next station single step ---\n\t\t//\n\t\t//--- Carrier moved in EndTarget\n\t\t\tIF \tTHIS^.ifCarrier.ifFeedback.ifFeedbackMoveGapControl.xInEndTargetPosition THEN\n\t\t\t\t\n\t\t\t\tAddMessageToAPL('Move one Carrier out of Station '); \n\t\t\t\t\n\t\t\t\t//--- Set/Reset Product information on Carrier -----\n\t\t\t\t\tIF NOT THIS^.xError_loc THEN\n\t\t\t\t\t\tIF THIS^.etStationType = ET_StationType.Load THEN\n\t\t\t\t\t\t\tTHIS^.ifCarrier.ifConfiguration.xProductPresent := TRUE;\n\t\t\t\t\t\t\t//--- Emulation ---\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tGVL_MulticarrierEmulation.G_aetProductColor[THIS^.ifCarrier.udiCarrierIndex]\t:= DTC.ET_EmulationColors.LightSkyBlue;\n\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF THIS^.etStationType = ET_StationType.Unload THEN\n\t\t\t\t\t\t\tTHIS^.ifCarrier.ifConfiguration.xProductPresent := FALSE;\n\t\t\t\t\t\t\t//--- Emulation ---\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tGVL_MulticarrierEmulation.G_aetProductColor[THIS^.ifCarrier.udiCarrierIndex]\t:= DTC.ET_EmulationColors.Transparent;\t\t\t\t\t\t\n\t\t\t\t\t\tEND_IF\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t//--- write new MotionParameter  -----------------------\t\n\t\t\t\t\t\tWriteMotionParameter(\n\t\t\t\t\t\t\ti_lrMaxVelocity     := THIS^.lrMaxVelocity,     \n\t\t\t\t\t\t\ti_lrMaxAcceleration := THIS^.lrMaxAcceleration, \n\t\t\t\t\t\t\ti_lrMaxDeceleration := THIS^.lrMaxDeceleration, \n\t\t\t\t\t\t\ti_lrMaxAbsJerk\t\t:= THIS^.lrMaxJerk);      \n\t\t\t\t\t\t\n\t\t\t\t//--- MoveGap --------------------------------------------\t\n\t\t\t\t\tMoveGap(\n\t\t\t\t\t\ti_etPosMode \t\t:= THIS^.etPosMode,\n\t\t\t\t\t\ti_lrTargetGap\t\t:= THIS^.ifTargetStation.lrHandoverTargetGap, \n\t\t\t\t\t\ti_lrTarget\t\t\t:= THIS^.ifTargetStation.lrHandoverTargetPosition);\n\t\t\t\t\t\n\t\t\t\t//--- handover carrier to target station -----------------  \n\t\t\t\t\t\tHandOverCarriers(i_udiNumberOfCarriers := 1);\n\t\t\t\t\t\t\n\t\t\t\tIF NOT THIS^.xError_loc THEN\n\t\t\t\t\tiq_xMoveCarrierOutOfStation := FALSE;\n\t\t\t\t\tiState := 0;\t\n\t\t\t\tEND_IF\n\t\t\tEND_IF\t\t\n\n//-------------------------------------------------------------------------------------------------------------------\t\n\nEND_CASE","LineInfoPersistence":"(string)e7eecc84-0673-4a3a-99c7-eeb29e6748f3_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)METHOD CyclicMotionCall : BOOL\nVAR_IN_OUT\n\tiq_xMoveCarrierOutOfStation: BOOL;\nEND_VAR\nVAR\n\tudiLoop: UDINT;\n\tlrGapToTargetStation : lreal;\n\txMoveIntoProcessWithStationMotionParameter: BOOL;\n\txMoveIntoLoadWithStationMotionParameter: BOOL;\nEND_VAR\nVAR_INST\n\tifFirstCarrierInStation : MCR.IF_Carrier;\n\txAllCarrierinStation\t: BOOL;\nEND_VAR","LineInfoPersistence":"(string)e7eecc84-0673-4a3a-99c7-eeb29e6748f3_Decl_LineIds"}}}}}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","f8a58466":"{f8a58466-d7f6-439f-bbb8-d4600e41d099}","string":"System.String"}}},"FormatVersion":"1.0"}