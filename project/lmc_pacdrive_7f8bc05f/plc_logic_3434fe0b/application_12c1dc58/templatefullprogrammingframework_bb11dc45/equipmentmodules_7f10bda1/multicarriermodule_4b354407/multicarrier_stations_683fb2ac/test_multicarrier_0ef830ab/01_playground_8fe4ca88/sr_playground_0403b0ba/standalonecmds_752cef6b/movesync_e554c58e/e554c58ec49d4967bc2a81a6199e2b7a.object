{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)e554c58e-c49d-4967-bc2a-81a6199e2b7a","ParentGuid":"(Guid)0403b0ba-733f-43db-97c2-48be15d20a04","Name":"(string)MoveSync","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)752cef6b-1fef-4c6c-9b2b-37fba8b355c0"}]}}}}]},"TypeGuid":"(Guid)8ac092e5-3128-4e26-9e7e-11016c6684f2","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"8ac092e5","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)IF xMoveSingleSuperimposedChannelC THEN\n\txMoveSingleSuperimposedChannelC := FALSE;\n\ti_ifMultiCarrier.raifCarrier[udiCarrierIndexSingleSuperimposedChannelC].ifMotion.SetMotionParameterSuperimposedChannelC(\n\t\t\t\t\ti_lrMaxVelocity\t\t:= lrMaxVelSuperimposedChannelC, \n\t\t\t\t\ti_lrMaxAcceleration\t:= lrMaxAccSuperimposedChannelC, \n\t\t\t\t\ti_lrMaxDeceleration\t:= lrMaxDecSuperimposedChannelC,\n\t\t\t\t\ti_lrMaxAbsJerk\t\t:= lrMaxJerkSuperimposedChannelC,\n\t\t\t\t\tq_xError\t\t\t=> xError,\n\t\t\t\t\tq_etResult\t\t\t=> etResultMCR,\n\t\t\t\t\tq_sResultMsg\t\t=> sResultMsg);\t\n\t\t\n\ti_ifMultiCarrier.raifCarrier[udiCarrierIndexSingleSuperimposedChannelC].ifMotion.ifMoveSyncFromStandstill.ifSuperimposedChannelC.StartAbsolutePositioning(\n\t\t\t\t\ti_lrTarget\t\t\t:= lrPositionSingleSuperimposedChannelC,\n\t\t\t\t\tq_xError\t\t\t=> xError,\n\t\t\t\t\tq_etResult\t\t\t=> etResultMCR,\n\t\t\t\t\tq_sResultMsg\t\t=> sResultMsg);\t\n\t\nEND_IF\n\nIF  xMoveSyncPlayGround AND \n\t\tudiCarrierSyncNr > 0 \n\t\t\tAND udiCarrierSyncNr <= TO_UINT(i_ifMulticarrier.ifFeedback.ifFeedbackConfiguration.udiNumberOfCarriers) \nTHEN\n\txMoveSyncPlayGround := FALSE;\n\t\n\tIF xMoveSyncCurveCompensation THEN\n\t\tFOR udiLoop := 1 TO i_ifMulticarrier.ifFeedback.ifFeedbackConfiguration.udiNumberOfCarriers DO\n\t\t//--- Setting for Curve Compensation ------------\n\t\t\tstToolPivotPointOffset.lrX := lrXPivot;\n\t\t\tstToolPivotPointOffset.lrY := lrYPivot;\n\t\t\tstToolPivotPointOffset.lrZ := 0;\n\t\t\t\n\t\t\ti_ifMultiCarrier.raifCarrier[udiLoop].ifConfiguration.SetToolPivotPointOffset(\n\t\t\t\ti_stToolPivotPointOffset\t:= stToolPivotPointOffset,\n\t\t\t\tq_xError\t\t\t\t\t=> xError,\n\t\t\t\tq_etResult\t\t\t\t\t=> etResultMCR,\n\t\t\t\tq_sResultMsg\t\t\t\t=> sResultMsg);\n\t\t\t\t\n\t\t\tIF xError THEN\n\t\t\t\tEXIT;\n\t\t\tEND_IF\n\t\tEND_FOR\n\tEND_IF\n\t\n\t//--- check number of Slaves are not more than Carrier available \n\t\tIF uiNrOfSyncCarrier >=  i_ifMulticarrier.ifFeedback.ifFeedbackConfiguration.udiNumberOfCarriers \n\t\tTHEN\n\t\t\t//--- reduce to maximum number ----\n\t\t\tuiNrOfSyncCarrier := TO_UINT(i_ifMulticarrier.ifFeedback.ifFeedbackConfiguration.udiNumberOfCarriers - 1);\n\t\tEND_IF\n\t//\n\t//--- prepare for-loop counter --------\n\t\tuiCountNrOfSyncCarrier := uiNrOfSyncCarrier;\n\t//\n\t//--- Send Move Sync to Slaves ---------------------\n\tIF \txMoveSyncToCarrierInFront\n\tTHEN\n\t\tudiNextCarrierMoveSync := i_ifMulticarrier.raifCarrier[udiCarrierSyncNr].ifFeedback.ifFeedbackToBehind.udiCarrierIndexCarrierBehind; \n\tELSE\n\t\tudiNextCarrierMoveSync := i_ifMulticarrier.raifCarrier[udiCarrierSyncNr].ifFeedback.ifFeedbackToInFront.udiCarrierIndexCarrierInFront; \n\tEND_IF\n\t\n\tFOR udiLoop :=  1 TO uiNrOfSyncCarrier DO\n\t\t\n\t\t\tIF xMoveSyncToCarrierInFront THEN\n\t\t\t\ti_ifMulticarrier.raifCarrier[udiNextCarrierMoveSync].ifMotion.ifMoveSyncFromStandstill.StartSyncToCarrierInFront(\t\n\t\t\t\t\tq_xError\t\t=> xError,\n\t\t\t\t\tq_etResult\t\t=> etResultMCR,\n\t\t\t\t\tq_sResultMsg\t=> sResultMsg);\n\t\t\t\t\t\n\t\t\t\tIF xMoveSyncCurveCompensation THEN\n\t\t\t\t\n\t\t\t\t\ti_ifMulticarrier.raifCarrier[udiNextCarrierMoveSync].ifMotion.ifMoveSyncFromStandstill.StartCurveCompensationToCarrierInFront(\t\n\t\t\t\t\t\tq_xError\t\t=> xError,\n\t\t\t\t\t\tq_etResult\t\t=> etResultMCR,\n\t\t\t\t\t\tq_sResultMsg\t=> sResultMsg);\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\t\tELSIF xMoveSyncToCarrierBehind THEN\n\t\t\t\ti_ifMulticarrier.raifCarrier[udiNextCarrierMoveSync].ifMotion.ifMoveSyncFromStandstill.StartSyncToCarrierBehind(\t\n\t\t\t\t\tq_xError\t\t=> xError,\n\t\t\t\t\tq_etResult\t\t=> etResultMCR,\n\t\t\t\t\tq_sResultMsg\t=> sResultMsg);\n\t\t\tEND_IF\n\t\t\n\t\t\t\n\t\t\tIF \txMoveSyncToCarrierInFront\n\t\t\tTHEN\n\t\t\t\tudiNextCarrierMoveSync := i_ifMulticarrier.raifCarrier[udiNextCarrierMoveSync].ifFeedback.ifFeedbackToBehind.udiCarrierIndexCarrierBehind; \n\t\t\tELSE\n\t\t\t\tudiNextCarrierMoveSync := i_ifMulticarrier.raifCarrier[udiNextCarrierMoveSync].ifFeedback.ifFeedbackToInFront.udiCarrierIndexCarrierInFront; \n\t\t\tEND_IF\t\t\t\n\t\t\n\t\tIF xError THEN\n\t\t\tEXIT;\n\t\tEND_IF\n\tEND_FOR\n\t//\n\t//--- Send MoveDirectly or MoveGapControl to Master ---------------------\n\t\tIF NOT xError THEN\n\t\t\ti_ifMulticarrier.raifCarrier[udiCarrierSyncNr].ifMotion.SetMotionParameter(\n\t\t\t\t\ti_lrMaxVelocity\t\t:= lrSyncVel, \n\t\t\t\t\ti_lrMaxAcceleration\t:= lrSyncVel * 10, \n\t\t\t\t\ti_lrMaxDeceleration\t:= lrSyncVel * 10,\n\t\t\t\t\ti_lrMaxAbsJerk\t\t:= lrSyncVel * 100,\n\t\t\t\t\tq_xError\t\t\t=> xError,\n\t\t\t\t\tq_etResult\t\t\t=> etResultMCR,\n\t\t\t\t\tq_sResultMsg\t\t=> sResultMsg);\t\n\t\tEND_IF\n\t\n\t\tIF NOT xError THEN\n\t\t\tIF NOT xUseMoveGapForMaster THEN\n\t\t\t\ti_ifMulticarrier.raifCarrier[udiCarrierSyncNr].ifMotion.ifMoveDirectly.Start(\t\n\t\t\t\t\t\ti_lrTarget\t\t:= lrSyncTarget,\n\t\t\t\t\t\ti_etPosMode\t\t:= etPosModeSyncDirectly,\n\t\t\t\t\t\tq_xError\t\t=> xError,\n\t\t\t\t\t\tq_etResult\t\t=> etResultMCR,\n\t\t\t\t\t\tq_sResultMsg\t=> sResultMsg);\t\n\t\t\tELSE\n\t\t\t\ti_ifMulticarrier.raifCarrier[udiCarrierSyncNr].ifMotion.ifMoveGapControl.Start(\t\n\t\t\t\t\t\ti_lrTarget\t\t:= lrSyncTarget,\n\t\t\t\t\t\ti_lrTargetGap\t:= lrTargetGapSingleMove,\n\t\t\t\t\t\ti_etPosMode\t\t:= etPosModeSyncDirectly,\n\t\t\t\t\t\tq_xError\t\t=> xError,\n\t\t\t\t\t\tq_etResult\t\t=> etResultMCR,\n\t\t\t\t\t\tq_sResultMsg\t=> sResultMsg);\t\n\t\t\tEND_IF\t\t\n\t\tEND_IF\n\t\t\n\t\t\nEND_IF\n\nIF xMoveSyncCurveCompensation AND xMoveSyncToCarrierBehind THEN\n\txMoveSyncCurveCompensation := FALSE;\nEND_IF\n \n//--- only for vis ---------------------------------------   \nCASE uiFlag OF\n\n\t0:\tIF xUseMoveGapForMaster THEN\n\t\t\txUseMoveDirectlyForMaster := FALSE;\n\t\t\tuiFlag := 1;\n\t\tEND_IF\n\t\tIF xUseMoveDirectlyForMaster THEN\n\t\t\txUseMoveGapForMaster := FALSE;\n\t\t\tuiFlag := 2;\n\t\tEND_IF \t\n\t\n\t1: \tIF xUseMoveDirectlyForMaster THEN\n\t\t\txUseMoveGapForMaster := FALSE;\n\t\t\tuiFlag := 2;\n\t\tELSIF NOT xUseMoveGapForMaster THEN\n\t\t\txUseMoveDirectlyForMaster := TRUE;\n\t\t\tuiFlag := 2;\n\t\tEND_IF \t\n\t\t\n\t2: \tIF xUseMoveGapForMaster THEN\n\t\t\txUseMoveDirectlyForMaster := FALSE;\n\t\t\tuiFlag := 1;\n\t\tELSIF NOT xUseMoveDirectlyForMaster THEN\n\t\t\txUseMoveGapForMaster := TRUE;\n\t\t\tuiFlag := 1;\n\t\tEND_IF \t\n\nEND_CASE\n\nCASE uiFlag2 OF\n\n\t0:\tIF xMoveSyncToCarrierInFront THEN\n\t\t\txMoveSyncToCarrierBehind := FALSE;\n\t\t\tuiFlag2 := 1;\n\t\tEND_IF\n\t\tIF xMoveSyncToCarrierBehind THEN\n\t\t\txMoveSyncToCarrierInFront := FALSE;\n\t\t\tuiFlag2 := 2;\n\t\tEND_IF \t\n\t\t\n\t1: \tIF xMoveSyncToCarrierBehind THEN\n\t\t\txMoveSyncToCarrierInFront := FALSE;\n\t\t\tuiFlag2 := 2;\n\t\tELSIF NOT xMoveSyncToCarrierInFront THEN\n\t\t\txMoveSyncToCarrierBehind := TRUE;\n\t\t\tuiFlag2 := 2;\n\t\tEND_IF \t\n\t\t\n\t2: \tIF xMoveSyncToCarrierInFront THEN\n\t\t\txMoveSyncToCarrierBehind := FALSE;\n\t\t\tuiFlag2 := 1;\n\t\tELSIF NOT xMoveSyncToCarrierBehind THEN\n\t\t\txMoveSyncToCarrierInFront := TRUE;\n\t\t\tuiFlag2 := 1;\n\t\tEND_IF \t\n\nEND_CASE","LineInfoPersistence":"(string)e554c58e-c49d-4967-bc2a-81a6199e2b7a_Impl_LineIds"}}}},"UniqueIdGenerator":"(string)996"}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","8ac092e5":"{8ac092e5-3128-4e26-9e7e-11016c6684f2}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}