{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)3f09c16f-6d17-42bf-986b-7819269a7b76","ParentGuid":"(Guid)abacf420-6692-4371-b169-bbd6e5873750","Name":"(string)CmdControl_Action","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)8ac092e5-3128-4e26-9e7e-11016c6684f2","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"8ac092e5","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)(* CMD execution\n\n\talgorithm:\n\t----------\n\n\tdetect new command?\n\t\tcheck command?\n\t\t\texecute command;\n\t\tend\n\tend\n\n\tis command running (at least one cycle)?\t\n\t\tis command finished?\n\t\t\tsignal success/unsuccessful\n\t\tend\n\tend\n*)\n\nxCommandAcceptedInThisCycle := FALSE;\n\n(* Detect new command *)\nIF(iq_stStandardModuleItf.i_xEnable) THEN\n\tIF (iq_stStandardModuleItf.iq_diCMD > 0 AND (NOT iq_stStandardModuleItf.q_xCMDActive (* In case no command is active *)\n\t\t\tOR iq_stStandardModuleItf.iq_diCMD <> iq_stStandardModuleItf.q_diCMDActive) (* In case a command is active *)) THEN\n\t\n\t\txCommandRefused := FALSE; (* Flag is set by RefuseCommand() action *)\n\t\n\t\t(* Check command *)\n\t\tCheckCmd();\n\t\tIF(xCheckCmdException) THEN\n\t\t\t(*** Check for unknown command ***)\n\t\t\tstExceptionCmdUnknown.sMsg := Standard.CONCAT('Cmd unknown: ',DINT_TO_STRING(iq_stStandardModuleItf.iq_diCmd));\n\t\t\tReportException(iq_stException := stExceptionCmdUnknown); \n\t\t\tRefuseCommand();\n\t\tELSE\n\t\t\t(*** Check for impossible overwrite ***)\n\t\t\tIF(iq_stStandardModuleItf.q_xCMDActive AND iq_stStandardModuleItf.iq_diCMD <> ET_ExampleLeafModuleCmd.Stop) THEN (* In this module only the ET_ExampleLeafModuleCmd.Stop command can overwrite other commands *)\n\t\t\t\tstExceptionCmdImpossibleOverwrite.sMsg := PDL.FC_MultiConcat(\ti_sString1 := 'Cmd impossible: ',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString2 := FC_EtExampleLeafModuleCmdToString(i_diCmd := iq_stStandardModuleItf.iq_diCmd),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString3 := '; Cmd active: ',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString4 := FC_EtExampleLeafModuleCmdToString(i_diCmd := iq_stStandardModuleItf.q_diCmdActive) );\n\t\t\t\tReportException(iq_stException := stExceptionCmdImpossibleOverwrite);\t\n\t\t\t\tRefuseCommand();\n\t\t\tELSE\n\t\t\t\t(*** Check for impossible state ***)\n\t\t\t\tIF(NOT xOpModeCmd AND (* In this module, all OpMode commands are always possible independent of the state *)\n\t\t\t\t\t(iq_stExampleLeafModuleItf.q_etState = ET_ExampleLeafModuleState.NoOp (* Start and Hold are not possible in NoOp *)\n\t\t\t\t\tOR (iq_stExampleLeafModuleItf.q_etState = ET_ExampleLeafModuleState.HomingWaitForStart OR iq_stExampleLeafModuleItf.q_etState = ET_ExampleLeafModuleState.HomingDone) AND iq_stStandardModuleItf.iq_diCMD = ET_ExampleLeafModuleCmd.Hold) (* Hold is not supported in homing *)\n\t\t\t\t\t) THEN\n\t\t\t\t\tstExceptionCmdImpossibleState.sMsg := PDL.FC_MultiConcat(\ti_sString1 := 'Cmd impossible: ',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString2 := FC_EtExampleLeafModuleCmdToString(i_diCmd := iq_stStandardModuleItf.iq_diCmd),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString3 := '; State: ',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString4 := FC_EtExampleLeafModuleStateToString(i_etState := iq_stExampleLeafModuleItf.q_etState) );\n\t\t\t\t\tReportException(iq_stException := stExceptionCmdImpossibleState);\n\t\t\t\t\tRefuseCommand();\n\t\t\t\tELSE\n\t\t\t\t\t(* Check for impossible commands due to active error reactions *)\n\t\t\t\t\tIF\tiq_stStandardModuleItf.iq_diCMD = ET_ExampleLeafModuleCmd.Start \n\t\t\t\t\t\t\tAND (stModuleReaction.axReaction[TPL.ET_Reaction.AsyncStop] OR \n\t\t\t\t\t\t\t\t stModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEH] OR \n\t\t\t\t\t\t\t\t stModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEL] OR \n\t\t\t\t\t\t\t\t stModuleReaction.axReaction[TPL.ET_Reaction.StopEndOfCycle]) (* Start impossible if error reaction 4 or higher *)\n\t\t\t\t\t\tOR \n\t\t\t\t\t\t\n\t\t\t\t\t\tiq_stStandardModuleItf.iq_diCMD <> ET_ExampleLeafModuleCmd.Stop \n\t\t\t\t\t\t\tAND (stModuleReaction.axReaction[TPL.ET_Reaction.AsyncStop] OR \n\t\t\t\t\t\t\t\t stModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEH] OR \n\t\t\t\t\t\t\t\t stModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEL]) THEN (* Everything else, with exception of Stop, impossible if error reaction 3 or higher *)\n\n\t\t\t\t\t\tstWarningCmdImpossibleReaction.sMsg := PDL.FC_MultiConcat(\ti_sString1 := 'Cmd impossible: ',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString2 := FC_EtExampleLeafModuleCmdToString(i_diCmd := iq_stStandardModuleItf.iq_diCmd),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString3 := '; Reaction: ',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti_sString4 := TPL.FC_GetStandardReactionName(iq_stReaction := stModuleReaction));\n\t\t\t\t\t\tReportException(iq_stException := stWarningCmdImpossibleReaction);\n\t\t\t\t\t\tRefuseCommand();\n\t\t\t\t\tEND_IF\n\t\t\t\tEND_IF\n\t\t\tEND_IF\n\t\tEND_IF\n\t\n\t\tIF(NOT xCommandRefused) THEN (* Command has passed all checks, execute command *)\n\t\t\tIF fbLoggerPoint.etLogLevel >= APL.ET_LogLevel.UserAction THEN\n\t\t\t\tfbLoggerPoint.AddLogEntry(\ti_etLogLevel\t:= APL.ET_LogLevel.UserAction,\n\t\t\t\t\t\t\t\t\t\t\ti_etDiag\t\t:= GD.ET_Diag.Ok,\n\t\t\t\t\t\t\t\t\t\t\ti_udiDiagExt\t:= ET_DiagExtExampleLeafModule.Ok,\n\t\t\t\t\t\t\t\t\t\t\ti_sMessage\t\t:= Standard.CONCAT(Standard.CONCAT(Standard.CONCAT('Command executing: ', FC_etExampleLeafModuleCmdToString(i_diCmd := iq_stStandardModuleItf.iq_diCmd)),' number: '),DINT_TO_STRING(iq_stStandardModuleItf.iq_diCmd)),\n\t\t\t\t\t\t\t\t\t\t\tq_etDiag\t\t:= ,\n\t\t\t\t\t\t\t\t\t\t\tq_etDiagExt\t\t:= );\n\t\t\tEND_IF\n\t\t\t(* Accept command *)\n\t\t\tiq_stStandardModuleItf.q_xCMDActive := TRUE;\n\t\t\tiq_stStandardModuleItf.q_xCMDDone := FALSE;\n\t\t\tiq_stStandardModuleItf.q_diCMDActive := iq_stStandardModuleItf.iq_diCMD;\n\t\n\t\t\txCommandAcceptedInThisCycle := TRUE; (* Signal for command done checks *)\n\t\n\t\t\tIF(xOpModeCMD) THEN\n\t\t\t\tDisableAllJobs();\n\t\t\t\t\n\t\t\t\tCASE iq_stStandardModuleItf.iq_diCMD OF\n\t\t\t\t\tET_ExampleLeafModuleCmd.Stop:\n\t\t\t\t\t\t;\t(* Do nothing, disabled OpMode flags automatically lead to NoOp *)\n\t\t\t\t\t\t\n\t\t\t\t\tET_ExampleLeafModuleCmd.Homing:\n\t\t\t\t\t\txHomingEnable := TRUE;\n\t\t\t\t\t\n\t\t\t\t\tET_ExampleLeafModuleCmd.Auto:\n\t\t\t\t\t\txAutoEnable := TRUE;\n\t\t\t\tEND_CASE\n\t\t\tELSE\n\t\t\t\t(* Action commands *)\n\t\t\t\tCASE iq_stStandardModuleItf.iq_diCMD OF\n\t\t\t\t\tET_ExampleLeafModuleCmd.Start:\n\t\t\t\t\t\txStartFlag := TRUE;\n\t\t\t\t\t\n\t\t\t\t\tET_ExampleLeafModuleCmd.Hold:\n\t\t\t\t\t\txStartFlag := FALSE;\n\t\t\t\tEND_CASE\n\t\t\tEND_IF\n\t\tEND_IF (* New command? *)\n\tEND_IF\n\n(********************************************* Check successful and unsucessful of given commands ****************************************)\n\n\t(* Check if active command is done or is stopped by an error *)\n\tIF(NOT xCommandAcceptedInThisCycle) THEN (* Don't execute these checks if we accepted a new command in this cycle\n\t\tto ensure that execution of every command requires a minimum of 2 cycles *)\n\n\t\tIF(iq_stStandardModuleItf.q_xCMDActive) THEN\n\t\t\tCASE iq_stStandardModuleItf.iq_diCmd OF\n\t\t\t\tET_ExampleLeafModuleCmd.Homing:\n\t\t\t\t\t(* Successful *)\n\t\t\t\t\tIF(xHomingActive) THEN\n\t\t\t\t\t\tSignalSuccessfulExecution();\n\t\t\t\t\tEND_IF\n\t\t\t\t\t(* Unsucessful *)\n\t\t\t\t\tIF (stModuleReaction.axReaction[TPL.ET_Reaction.AsyncStop] OR \n\t\t\t\t\t\tstModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEL] OR \n\t\t\t\t\t\tstModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEH]) THEN\n\t\t\t\t\t\t\n\t\t\t\t\t\tSignalUnsuccessfulExecution();\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\t\t\t\tET_ExampleLeafModuleCmd.Auto:\n\t\t\t\t\t(* Successful *)\n\t\t\t\t\tIF(xAutoActive) THEN\n\t\t\t\t\t\tSignalSuccessfulExecution();\n\t\t\t\t\tEND_IF\n\t\t\t\t\t(* Unsucessful *)\n\t\t\t\t\tIF (stModuleReaction.axReaction[TPL.ET_Reaction.AsyncStop] OR \n\t\t\t\t\t\tstModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEL] OR \n\t\t\t\t\t\tstModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEH]) THEN\n\n\t\t\t\t\t\tSignalUnsuccessfulExecution();\n\t\t\t\t\tEND_IF\n\t\n\t\t\t\tET_ExampleLeafModuleCmd.Stop:\n\t\t\t\t\t(* Successful *)\n\t\t\t\t\tIF(iq_stExampleLeafModuleItf.q_etState = ET_ExampleLeafModuleState.NoOp) THEN\n\t\t\t\t\t\tSignalSuccessfulExecution();\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\t\t\t\tET_ExampleLeafModuleCmd.Start:\n\t\t\t\t\tIF(iq_stExampleLeafModuleItf.q_etState = ET_ExampleLeafModuleState.HomingDone) THEN\n\t\t\t\t\t\txStartFlag := FALSE;\n\t\t\t\t\tEND_IF\n\t\t\t\t\t(* Successful *)\n\t\t\t\t\tIF(iq_stExampleLeafModuleItf.q_etState = ET_ExampleLeafModuleState.HomingDone AND NOT xHomingException\n\t\t\t\t\t\tOR iq_stExampleLeafModuleItf.q_etState = ET_ExampleLeafModuleState.AutoRunning) THEN\n\t\t\t\t\t\tSignalSuccessfulExecution();\n\t\t\t\t\tEND_IF\n\t\t\t\t\t(* Unsucessful *)\n\t\t\t\t\tIF (stModuleReaction.axReaction[TPL.ET_Reaction.AsyncStop] OR \n\t\t\t\t\t\tstModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEL] OR \n\t\t\t\t\t\tstModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEH] OR \n\t\t\t\t\t\tstModuleReaction.axReaction[TPL.ET_Reaction.StopEndOfCycle]  OR\n\t\t\t\t\t\tiq_stExampleLeafModuleItf.q_etState = ET_ExampleLeafModuleState.HomingDone AND xHomingException) THEN\n\t\t\t\t\t\t\n\t\t\t\t\t\tSignalUnsuccessfulExecution();\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\t\t\t\tET_ExampleLeafModuleCmd.Hold:\n\t\t\t\t\t(* Successful *)\n\t\t\t\t\tIF(iq_stExampleLeafModuleItf.q_etState = ET_ExampleLeafModuleState.AutoWaitForStart) THEN\n\t\t\t\t\t\tSignalSuccessfulExecution();\n\t\t\t\t\tEND_IF\n\t\t\t\t\t(* Unsucessful *)\n\t\t\t\t\tIF (stModuleReaction.axReaction[TPL.ET_Reaction.AsyncStop] OR \n\t\t\t\t\t\tstModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEL] OR \n\t\t\t\t\t\tstModuleReaction.axReaction[TPL.ET_Reaction.SyncStopEH]) THEN\n\n\t\t\t\t\t\tSignalUnsuccessfulExecution();\n\t\t\t\t\tEND_IF\n\t\t\tEND_CASE\n\t\tEND_IF\n\tEND_IF\nELSE\n\t(* Module is going to be disabled *)\n\tiq_stStandardModuleItf.q_xReady := FALSE;\n\txEnableFlag := FALSE;\n\t\n\tDisableAllJobs();\n\t\n\txStartFlag := FALSE;\n\n\tIF(iq_stStandardModuleItf.q_xCmdActive) THEN (* If a command is currently active, cancel its execution *)\n\t\tSignalUnsuccessfulExecution();\n\tELSE\n\t\tInactiveCmdExecution(); (* Command processing as if we were disabled *)\n\tEND_IF\nEND_IF","LineInfoPersistence":"(string)3f09c16f-6d17-42bf-986b-7819269a7b76_Impl_LineIds"}}}},"UniqueIdGenerator":"(string)546"}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","8ac092e5":"{8ac092e5-3128-4e26-9e7e-11016c6684f2}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}